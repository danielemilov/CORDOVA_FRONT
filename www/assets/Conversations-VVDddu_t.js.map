{"version":3,"file":"Conversations-VVDddu_t.js","sources":["../../src/components/Conversations.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { IonContent, IonList, IonItem, IonAvatar, IonLabel, IonBadge, IonSpinner, IonButton, IonText } from '@ionic/react';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport api from '../api';\nimport { useSocket } from '../contexts/SocketContext';\nimport { format, isToday, isYesterday, isThisWeek, parseISO, formatDistanceToNow } from 'date-fns';\n\nconst UnreadBadge = styled(IonBadge)`\n  margin-left: 10px;\n`;\n\nconst LastMessage = styled(IonLabel)`\n  color: ${props => props.$unread ? '#000' : '#666'};\n  font-weight: ${props => props.$unread ? 'bold' : 'normal'};\n  font-size: 14px;\n  line-height: 1.4;\n`;\n\nconst TimeStamp = styled(IonLabel)`\n  font-size: 12px;\n  color: #999;\n  white-space: nowrap;\n`;\n\nconst NoConversationsMessage = styled(IonText)`\n  text-align: center;\n  font-size: 16px;\n  color: #666;\n  margin-top: 20px;\n`;\n\nconst Conversations = ({ onSelectConversation, filter, unreadMessages, currentUser }) => {\n  const [conversations, setConversations] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const socket = useSocket();\n  const history = useHistory();\n\n  const fetchConversations = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const response = await api.get('/api/messages/conversations');\n      if (Array.isArray(response.data)) {\n        setConversations(response.data);\n        console.log(\"PLACE1\")\n      } else {\n        console.error('Unexpected response format:', response.data);\n        setError('Received unexpected data format from server');\n      }\n    } catch (error) {\n      console.error('Error fetching conversations:', error);\n      const errorMessage = error.response?.data?.message || 'Failed to fetch conversations';\n      setError(errorMessage);\n      if (error.response?.status === 401) {\n        history.push('/login');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, [history]);\n\n  useEffect(() => {\n    fetchConversations();\n  }, [fetchConversations]);\n\n  useEffect(() => {\n    if (socket) {\n      const handleUpdateConversation = (updatedConversation) => {\n        console.log(\"PLACE2\")\n        setConversations(prevConversations => {\n          const existingIndex = prevConversations.findIndex(conv => conv._id === updatedConversation._id);\n\n          if (existingIndex !== -1) {\n            const updatedConversations = [...prevConversations];\n            updatedConversations[existingIndex] = updatedConversation;\n            return updatedConversations.sort((a, b) => \n              new Date(b.lastMessage?.createdAt || 0) - new Date(a.lastMessage?.createdAt || 0)\n            );\n          } else {\n            return [updatedConversation, ...prevConversations];\n          }\n        });\n      };\n\n      const handleMessageRead = ({ conversationId }) => {\n        console.log(\"PLACE3\")\n\n        setConversations(prevConversations => \n          prevConversations.map(conv => \n            conv._id === conversationId ? { ...conv, unreadCount: 0 } : conv\n          )\n        );\n      };\n\n      const handleNewMessage = (message) => {\n        console.log(\"PLACE4\")\n\n        setConversations(prevConversations => {\n          const updatedConversations = prevConversations.map(conv => {\n            if (conv._id === message.conversationId) {\n              return {\n                ...conv,\n                lastMessage: message,\n                unreadCount: conv.unreadCount + (message.sender._id !== currentUser.id ? 1 : 0),\n              };\n            }\n            return conv;\n          });\n          return updatedConversations.sort((a, b) => \n            new Date(b.lastMessage?.createdAt || 0) - new Date(a.lastMessage?.createdAt || 0)\n          );\n        });\n      };\n\n      socket.on('update conversation', handleUpdateConversation);\n      socket.on('message read', handleMessageRead);\n      socket.on('new message', handleNewMessage);\n\n      return () => {\n        socket.off('update conversation', handleUpdateConversation);\n        socket.off('message read', handleMessageRead);\n        socket.off('new message', handleNewMessage);\n      };\n    }\n  }, [socket, currentUser.id]);\n\n  const formatLastMessageTime = useCallback((timestamp) => {\n    if (!timestamp) return '';\n    try {\n      const date = parseISO(timestamp);\n      if (isToday(date)) {\n        return format(date, 'h:mm a');\n      } else if (isYesterday(date)) {\n        return 'Yesterday';\n      } else if (isThisWeek(date)) {\n        return format(date, 'EEEE');\n      } else {\n        return formatDistanceToNow(date, { addSuffix: true });\n      }\n    } catch (error) {\n      console.error('Error formatting last message time:', error);\n      return '';\n    }\n  }, []);\n\n  const filteredConversations = useMemo(() => {\n    return conversations.filter(conv => \n      conv.participants && conv.participants.length > 0 && (\n        conv.participants.some(p => \n          p.username && p.username.toLowerCase().includes(filter.toLowerCase())\n        ) ||\n        (conv.lastMessage && conv.lastMessage.content && \n         conv.lastMessage.content.toLowerCase().includes(filter.toLowerCase()))\n      )\n    );\n  }, [conversations, filter]);\n\n  const handleConversationClick = useCallback(async (conversation) => {\n    if (socket && socket.connected) {\n      socket.emit('mark as read', { conversationId: conversation._id }, (error) => {\n        if (error) {\n          console.error('Error marking messages as read:', error);\n        } else {\n          console.log(\"PLACE5\")\n\n          setConversations(prevConversations =>\n            prevConversations.map(conv =>\n              conv._id === conversation._id ? { ...conv, unreadCount: 0 } : conv\n            )\n          );\n        }\n      });\n    } else {\n      console.warn('Socket is not connected. Unable to mark messages as read.');\n    }\n    const otherUser = conversation.participants.find(p => p._id !== currentUser.id);\n    onSelectConversation(otherUser);\n  }, [socket, onSelectConversation, currentUser]);\n\n  if (isLoading) {\n    return (\n      <IonContent className=\"ion-padding\">\n        <IonSpinner />\n      </IonContent>\n    );\n  }\n\n  if (error) {\n    return (\n      <IonContent className=\"ion-padding ion-text-center\">\n        <IonText color=\"danger\">{error}</IonText>\n        <IonButton onClick={fetchConversations}>Retry</IonButton>\n      </IonContent>\n    );\n  }\n\n  if (filteredConversations.length === 0) {\n    return (\n      <IonContent className=\"ion-padding ion-text-center\">\n        <NoConversationsMessage>No conversations found</NoConversationsMessage>\n        <IonButton onClick={fetchConversations}>Refresh</IonButton>\n      </IonContent>\n    );\n  }\n\n  return (\n    <IonContent>\n      <IonList>\n        {filteredConversations.map((conversation) => {\n          const otherUser = conversation.participants.find(p => p._id !== currentUser.id);\n          if (!otherUser) {\n            console.warn(\"Other user not found in conversation:\", conversation);\n            return null;\n          }\n          const isUnread = conversation.unreadCount > 0 && conversation.lastMessage?.sender._id !== currentUser.id;\n          return (\n            <IonItem \n              key={conversation._id}\n              onClick={() => handleConversationClick(conversation)}\n              button\n            >\n              <IonAvatar slot=\"start\">\n                <img src={otherUser.photo || 'https://via.placeholder.com/150'} alt={otherUser.username} />\n              </IonAvatar>\n              <IonLabel>\n                <h2>{otherUser.username}</h2>\n                <LastMessage $unread={isUnread}>\n                  {conversation.lastMessage ? conversation.lastMessage.content : \"No messages yet\"}\n                </LastMessage>\n              </IonLabel>\n              <div slot=\"end\">\n                {isUnread && (\n                  <UnreadBadge color=\"danger\">{conversation.unreadCount}</UnreadBadge>\n                )}\n                <TimeStamp>\n                  {conversation.lastMessage && formatLastMessageTime(conversation.lastMessage.createdAt)}\n                </TimeStamp>\n              </div>\n            </IonItem>\n          );\n        })}\n      </IonList>\n    </IonContent>\n  );\n};\n\nexport default React.memo(Conversations);"],"names":["UnreadBadge","styled","IonBadge","LastMessage","IonLabel","props","TimeStamp","NoConversationsMessage","IonText","Conversations","onSelectConversation","filter","unreadMessages","currentUser","conversations","setConversations","useState","isLoading","setIsLoading","error","setError","socket","useSocket","history","useHistory","fetchConversations","useCallback","response","api","errorMessage","useEffect","handleUpdateConversation","updatedConversation","prevConversations","existingIndex","conv","updatedConversations","a","b","_a","_b","handleMessageRead","conversationId","handleNewMessage","message","formatLastMessageTime","timestamp","date","parseISO","isToday","format","isYesterday","isThisWeek","formatDistanceToNow","filteredConversations","useMemo","p","handleConversationClick","conversation","otherUser","IonContent","jsx","IonSpinner","jsxs","IonButton","IonList","isUnread","IonItem","IonAvatar","Conversations$1","React"],"mappings":"uRAQA,MAAMA,EAAcC,EAAOC,CAAQ;AAAA;AAAA,EAI7BC,EAAcF,EAAOG,CAAQ;AAAA,WACfC,GAAAA,EAAM,QAAU,OAAS,MAAM;AAAA,iBACzBA,GAAAA,EAAM,QAAU,OAAS,QAAQ;AAAA;AAAA;AAAA,EAKrDC,EAAYL,EAAOG,CAAQ;AAAA;AAAA;AAAA;AAAA,EAM3BG,EAAyBN,EAAOO,CAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAOvCC,EAAgB,CAAC,CAAE,qBAAAC,EAAsB,OAAAC,EAAQ,eAAAC,EAAgB,YAAAC,KAAkB,CACvF,KAAM,CAACC,EAAeC,CAAgB,EAAIC,EAAA,SAAS,CAAE,CAAA,EAC/C,CAACC,EAAWC,CAAY,EAAIF,WAAS,EAAI,EACzC,CAACG,EAAOC,CAAQ,EAAIJ,WAAS,IAAI,EACjCK,EAASC,IACTC,EAAUC,IAEVC,EAAqBC,EAAAA,YAAY,SAAY,WAC7C,GAAA,CACFR,EAAa,EAAI,EACjBE,EAAS,IAAI,EACb,MAAMO,EAAW,MAAMC,EAAI,IAAI,6BAA6B,EACxD,MAAM,QAAQD,EAAS,IAAI,GAC7BZ,EAAiBY,EAAS,IAAI,EAC9B,QAAQ,IAAI,QAAQ,IAEZ,QAAA,MAAM,8BAA+BA,EAAS,IAAI,EAC1DP,EAAS,6CAA6C,SAEjDD,EAAO,CACN,QAAA,MAAM,gCAAiCA,CAAK,EACpD,MAAMU,IAAeV,GAAAA,EAAAA,EAAM,WAANA,YAAAA,EAAgB,OAAhBA,YAAAA,EAAsB,UAAW,gCACtDC,EAASS,CAAY,IACjBV,EAAAA,EAAM,WAANA,YAAAA,EAAgB,UAAW,KAC7BI,EAAQ,KAAK,QAAQ,CACvB,QACA,CACAL,EAAa,EAAK,CACpB,CAAA,EACC,CAACK,CAAO,CAAC,EAEZO,EAAAA,UAAU,IAAM,CACKL,GAAA,EAClB,CAACA,CAAkB,CAAC,EAEvBK,EAAAA,UAAU,IAAM,CACd,GAAIT,EAAQ,CACJ,MAAAU,EAA4BC,GAAwB,CACxD,QAAQ,IAAI,QAAQ,EACpBjB,EAAsCkB,GAAA,CACpC,MAAMC,EAAgBD,EAAkB,aAAkBE,EAAK,MAAQH,EAAoB,GAAG,EAE9F,GAAIE,IAAkB,GAAI,CAClB,MAAAE,EAAuB,CAAC,GAAGH,CAAiB,EAClD,OAAAG,EAAqBF,CAAa,EAAIF,EAC/BI,EAAqB,KAAK,CAACC,EAAGC,IACnC,SAAA,WAAI,OAAKC,EAAAD,EAAE,cAAF,YAAAC,EAAe,YAAa,CAAC,EAAI,IAAI,OAAKC,EAAAH,EAAE,cAAF,YAAAG,EAAe,YAAa,CAAC,EAAA,CAClF,KAEO,OAAA,CAACR,EAAqB,GAAGC,CAAiB,CACnD,CACD,CAAA,EAGGQ,EAAoB,CAAC,CAAE,eAAAC,KAAqB,CAChD,QAAQ,IAAI,QAAQ,EAEpB3B,KACEkB,EAAkB,IAAIE,GACpBA,EAAK,MAAQO,EAAiB,CAAE,GAAGP,EAAM,YAAa,CAAA,EAAMA,CAC9D,CAAA,CACF,EAGIQ,EAAoBC,GAAY,CACpC,QAAQ,IAAI,QAAQ,EAEpB7B,EAAsCkB,GACPA,EAAkB,IAAYE,GACrDA,EAAK,MAAQS,EAAQ,eAChB,CACL,GAAGT,EACH,YAAaS,EACb,YAAaT,EAAK,aAAeS,EAAQ,OAAO,MAAQ/B,EAAY,GAAK,EAAI,EAAA,EAG1EsB,CACR,EAC2B,KAAK,CAACE,EAAGC,IACnC,SAAA,WAAI,OAAKC,EAAAD,EAAE,cAAF,YAAAC,EAAe,YAAa,CAAC,EAAI,IAAI,OAAKC,EAAAH,EAAE,cAAF,YAAAG,EAAe,YAAa,CAAC,EAAA,CAEnF,CAAA,EAGI,OAAAnB,EAAA,GAAG,sBAAuBU,CAAwB,EAClDV,EAAA,GAAG,eAAgBoB,CAAiB,EACpCpB,EAAA,GAAG,cAAesB,CAAgB,EAElC,IAAM,CACJtB,EAAA,IAAI,sBAAuBU,CAAwB,EACnDV,EAAA,IAAI,eAAgBoB,CAAiB,EACrCpB,EAAA,IAAI,cAAesB,CAAgB,CAAA,CAE9C,CACC,EAAA,CAACtB,EAAQR,EAAY,EAAE,CAAC,EAErB,MAAAgC,EAAwBnB,cAAaoB,GAAc,CACnD,GAAA,CAACA,EAAkB,MAAA,GACnB,GAAA,CACI,MAAAC,EAAOC,EAASF,CAAS,EAC3B,OAAAG,EAAQF,CAAI,EACPG,EAAOH,EAAM,QAAQ,EACnBI,EAAYJ,CAAI,EAClB,YACEK,EAAWL,CAAI,EACjBG,EAAOH,EAAM,MAAM,EAEnBM,EAAoBN,EAAM,CAAE,UAAW,EAAM,CAAA,QAE/C5B,EAAO,CACN,eAAA,MAAM,sCAAuCA,CAAK,EACnD,EACT,CACF,EAAG,CAAE,CAAA,EAECmC,EAAwBC,EAAAA,QAAQ,IAC7BzC,EAAc,OAAOqB,GAC1BA,EAAK,cAAgBA,EAAK,aAAa,OAAS,IAC9CA,EAAK,aAAa,KAAKqB,GACrBA,EAAE,UAAYA,EAAE,SAAS,cAAc,SAAS7C,EAAO,aAAa,CAErE,GAAAwB,EAAK,aAAeA,EAAK,YAAY,SACrCA,EAAK,YAAY,QAAQ,YAAY,EAAE,SAASxB,EAAO,YAAa,CAAA,EAAA,EAGxE,CAACG,EAAeH,CAAM,CAAC,EAEpB8C,EAA0B/B,cAAY,MAAOgC,GAAiB,CAC9DrC,GAAUA,EAAO,UACZA,EAAA,KAAK,eAAgB,CAAE,eAAgBqC,EAAa,GAAI,EAAIvC,GAAU,CACvEA,EACM,QAAA,MAAM,kCAAmCA,CAAK,GAEtD,QAAQ,IAAI,QAAQ,EAEpBJ,KACEkB,EAAkB,IAAIE,GACpBA,EAAK,MAAQuB,EAAa,IAAM,CAAE,GAAGvB,EAAM,YAAa,CAAA,EAAMA,CAChE,CAAA,EAEJ,CACD,EAED,QAAQ,KAAK,2DAA2D,EAEpE,MAAAwB,EAAYD,EAAa,aAAa,QAAUF,EAAE,MAAQ3C,EAAY,EAAE,EAC9EH,EAAqBiD,CAAS,CAC7B,EAAA,CAACtC,EAAQX,EAAsBG,CAAW,CAAC,EAE9C,OAAII,QAEC2C,EAAW,CAAA,UAAU,cACpB,SAAAC,EAAAA,IAACC,IAAW,CACd,CAAA,EAIA3C,EAEA4C,EAAA,KAACH,EAAW,CAAA,UAAU,8BACpB,SAAA,CAACC,EAAA,IAAArD,EAAA,CAAQ,MAAM,SAAU,SAAMW,EAAA,EAC9B0C,EAAA,IAAAG,EAAA,CAAU,QAASvC,EAAoB,SAAK,QAAA,CAC/C,CAAA,CAAA,EAIA6B,EAAsB,SAAW,EAEjCS,EAAA,KAACH,EAAW,CAAA,UAAU,8BACpB,SAAA,CAAAC,EAAAA,IAACtD,GAAuB,SAAsB,wBAAA,CAAA,EAC7CsD,EAAA,IAAAG,EAAA,CAAU,QAASvC,EAAoB,SAAO,UAAA,CACjD,CAAA,CAAA,QAKDmC,EACC,CAAA,SAAAC,EAAA,IAACI,GACE,SAAsBX,EAAA,IAAKI,GAAiB,OACrC,MAAAC,EAAYD,EAAa,aAAa,QAAUF,EAAE,MAAQ3C,EAAY,EAAE,EAC9E,GAAI,CAAC8C,EACK,eAAA,KAAK,wCAAyCD,CAAY,EAC3D,KAEH,MAAAQ,EAAWR,EAAa,YAAc,KAAKnB,EAAAmB,EAAa,cAAb,YAAAnB,EAA0B,OAAO,OAAQ1B,EAAY,GAEpG,OAAAkD,EAAA,KAACI,EAAA,CAEC,QAAS,IAAMV,EAAwBC,CAAY,EACnD,OAAM,GAEN,SAAA,CAAAG,EAAA,IAACO,EAAU,CAAA,KAAK,QACd,SAAAP,EAAA,IAAC,MAAI,CAAA,IAAKF,EAAU,OAAS,kCAAmC,IAAKA,EAAU,QAAU,CAAA,EAC3F,SACCvD,EACC,CAAA,SAAA,CAACyD,EAAAA,IAAA,KAAA,CAAI,WAAU,QAAS,CAAA,EACxBA,EAAAA,IAAC1D,GAAY,QAAS+D,EACnB,WAAa,YAAcR,EAAa,YAAY,QAAU,iBACjE,CAAA,CAAA,EACF,EACAK,EAAAA,KAAC,MAAI,CAAA,KAAK,MACP,SAAA,CAAAG,GACEL,EAAAA,IAAA7D,EAAA,CAAY,MAAM,SAAU,WAAa,YAAY,EAExD6D,EAAAA,IAACvD,GACE,SAAaoD,EAAA,aAAeb,EAAsBa,EAAa,YAAY,SAAS,EACvF,CAAA,EACF,CAAA,CAAA,EApBKA,EAAa,GAAA,CAqBpB,CAEH,EACH,CACF,CAAA,CAEJ,EAEAW,GAAeC,EAAM,KAAK7D,CAAa"}